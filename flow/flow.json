[
  {
    "id": "dashboard_tab",
    "type": "tab",
    "label": "Hydroponic Dashboard",
    "disabled": false,
    "info": ""
  },
  {
    "id": "ui_group_sensors",
    "type": "ui_group",
    "name": "Sensor Readings",
    "tab": "dashboard_tab",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "ui_group_kpis",
    "type": "ui_group", 
    "name": "Performance KPIs",
    "tab": "dashboard_tab",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "ui_group_controls",
    "type": "ui_group",
    "name": "Manual Controls",
    "tab": "dashboard_tab",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "ui_group_system",
    "type": "ui_group",
    "name": "System Status",
    "tab": "dashboard_tab",
    "order": 4,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "sensor_data_node",
    "type": "http request",
    "name": "Get Sensor Data",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/status",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 150,
    "y": 100,
    "z": "dashboard_tab",
    "wires": [["parse_sensor_data"]]
  },
  {
    "id": "parse_sensor_data",
    "type": "function",
    "name": "Parse Sensor Data",
    "func": "// Extract sensor data from API response\nconst data = msg.payload;\n\nif (data.sensors) {\n    const sensors = data.sensors;\n    \n    // pH Gauge\n    msg.ph = {\n        payload: sensors.water.ph,\n        timestamp: sensors.timestamp\n    };\n    \n    // EC Gauge\n    msg.ec = {\n        payload: sensors.water.ec,\n        timestamp: sensors.timestamp\n    };\n    \n    // Temperature\n    msg.temp = {\n        payload: sensors.air.temperature,\n        timestamp: sensors.timestamp\n    };\n    \n    // Humidity\n    msg.humidity = {\n        payload: sensors.air.humidity,\n        timestamp: sensors.timestamp\n    };\n    \n    // VPD Calculation\n    const temp = sensors.air.temperature;\n    const rh = sensors.air.humidity;\n    const es = 0.6108 * Math.pow(10, (7.5 * temp) / (237.3 + temp));\n    const ea = es * (rh / 100);\n    const vpd = es - ea;\n    \n    msg.vpd = {\n        payload: Math.round(vpd * 100) / 100,\n        timestamp: sensors.timestamp\n    };\n    \n    // Water Level Status\n    msg.water_level = {\n        payload: sensors.water.level_high ? \"High\" : (sensors.water.level_low ? \"Low\" : \"Critical\"),\n        timestamp: sensors.timestamp\n    };\n}\n\nreturn [msg.ph, msg.ec, msg.temp, msg.humidity, msg.vpd, msg.water_level];",
    "outputs": 6,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "z": "dashboard_tab",
    "wires": [
      ["ph_gauge"],
      ["ec_gauge"], 
      ["temp_gauge"],
      ["humidity_gauge"],
      ["vpd_gauge"],
      ["water_level_text"]
    ]
  },
  {
    "id": "ph_gauge",
    "type": "ui_gauge",
    "name": "pH Level",
    "group": "ui_group_sensors",
    "order": 1,
    "width": 3,
    "height": 3,
    "gtype": "gage",
    "title": "pH",
    "label": "",
    "format": "{{value}}",
    "min": "4",
    "max": "8",
    "colors": [
      "#ca3838",
      "#e6e600", 
      "#ca3838"
    ],
    "seg1": "5.5",
    "seg2": "6.5",
    "x": 550,
    "y": 60,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "ec_gauge",
    "type": "ui_gauge",
    "name": "EC Level",
    "group": "ui_group_sensors",
    "order": 2,
    "width": 3,
    "height": 3,
    "gtype": "gage",
    "title": "EC (mS/cm)",
    "label": "",
    "format": "{{value}}",
    "min": "0",
    "max": "3",
    "colors": [
      "#ca3838",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "1.2",
    "seg2": "2.0", 
    "x": 550,
    "y": 100,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "temp_gauge",
    "type": "ui_gauge",
    "name": "Temperature",
    "group": "ui_group_sensors",
    "order": 3,
    "width": 3,
    "height": 3,
    "gtype": "gage",
    "title": "Air Temp (Â°C)",
    "label": "",
    "format": "{{value}}",
    "min": "10",
    "max": "35",
    "colors": [
      "#3366cc",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "18",
    "seg2": "26",
    "x": 550,
    "y": 140,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "humidity_gauge",
    "type": "ui_gauge",
    "name": "Humidity",
    "group": "ui_group_sensors",
    "order": 4,
    "width": 3,
    "height": 3,
    "gtype": "gage",
    "title": "Humidity (%)",
    "label": "",
    "format": "{{value}}",
    "min": "30",
    "max": "90",
    "colors": [
      "#ca3838",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "50",
    "seg2": "70",
    "x": 550,
    "y": 180,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "vpd_gauge",
    "type": "ui_gauge",
    "name": "VPD",
    "group": "ui_group_sensors",
    "order": 5,
    "width": 3,
    "height": 3,
    "gtype": "gage",
    "title": "VPD (kPa)",
    "label": "",
    "format": "{{value}}",
    "min": "0",
    "max": "3",
    "colors": [
      "#ca3838",
      "#e6e600",
      "#ca3838"
    ],
    "seg1": "0.8",
    "seg2": "1.2",
    "x": 550,
    "y": 220,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "water_level_text",
    "type": "ui_text",
    "name": "Water Level",
    "group": "ui_group_sensors",
    "order": 6,
    "width": 6,
    "height": 1,
    "format": "Water Level: {{msg.payload}}",
    "layout": "row-spread",
    "x": 550,
    "y": 260,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "kpi_data_node",
    "type": "http request",
    "name": "Get KPI Data",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/kpis",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 150,
    "y": 350,
    "z": "dashboard_tab",
    "wires": [["parse_kpi_data"]]
  },
  {
    "id": "parse_kpi_data",
    "type": "function",
    "name": "Parse KPI Data",
    "func": "// Parse KPI data for chart display\nconst data = msg.payload;\n\nif (data.kpis) {\n    const kpis = data.kpis;\n    \n    // Health Score Chart Data\n    msg.health_score = {\n        payload: [{\n            series: ['Health Score'],\n            data: [[\n                new Date(kpis.timestamp),\n                Math.round(kpis.health_score * 100)\n            ]],\n            labels: ['Time']\n        }]\n    };\n    \n    // pH In-Spec Percentage\n    msg.ph_spec = {\n        payload: Math.round(kpis.ph_in_spec * 100),\n        timestamp: kpis.timestamp\n    };\n    \n    // EC In-Spec Percentage  \n    msg.ec_spec = {\n        payload: Math.round(kpis.ec_in_spec * 100),\n        timestamp: kpis.timestamp\n    };\n    \n    // Daily Dosing Total\n    msg.daily_dose = {\n        payload: kpis.ml_total_24h || 0,\n        timestamp: kpis.timestamp\n    };\n}\n\nreturn [msg.health_score, msg.ph_spec, msg.ec_spec, msg.daily_dose];",
    "outputs": 4,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 350,
    "z": "dashboard_tab",
    "wires": [
      ["health_chart"],
      ["ph_spec_text"],
      ["ec_spec_text"],
      ["daily_dose_text"]
    ]
  },
  {
    "id": "health_chart",
    "type": "ui_chart",
    "name": "Health Score",
    "group": "ui_group_kpis",
    "order": 1,
    "width": 6,
    "height": 4,
    "label": "Health Score (24h)",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm",
    "interpolate": "linear",
    "nodata": "No Data",
    "dot": false,
    "ymin": "0",
    "ymax": "100",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "86400",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e"
    ],
    "outputs": 1,
    "x": 550,
    "y": 320,
    "z": "dashboard_tab",
    "wires": [[]]
  },
  {
    "id": "ph_spec_text",
    "type": "ui_text",
    "name": "pH In-Spec",
    "group": "ui_group_kpis",
    "order": 2,
    "width": 2,
    "height": 1,
    "format": "pH: {{msg.payload}}%",
    "layout": "row-spread",
    "x": 550,
    "y": 360,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "ec_spec_text",
    "type": "ui_text",
    "name": "EC In-Spec",
    "group": "ui_group_kpis",
    "order": 3,
    "width": 2,
    "height": 1,
    "format": "EC: {{msg.payload}}%",
    "layout": "row-spread",
    "x": 550,
    "y": 400,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "daily_dose_text",
    "type": "ui_text",
    "name": "Daily Dosing",
    "group": "ui_group_kpis",
    "order": 4,
    "width": 2,
    "height": 1,
    "format": "Dosed: {{msg.payload}}ml",
    "layout": "row-spread",
    "x": 550,
    "y": 440,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "led_slider",
    "type": "ui_slider",
    "name": "LED Power",
    "label": "LED Power %",
    "tooltip": "",
    "group": "ui_group_controls",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": true,
    "outs": "end",
    "topic": "led_power",
    "topicType": "str",
    "min": 0,
    "max": 100,
    "step": 5,
    "x": 150,
    "y": 500,
    "z": "dashboard_tab",
    "wires": [["led_control"]]
  },
  {
    "id": "fan_slider",
    "type": "ui_slider",
    "name": "Fan Speed",
    "label": "Fan Speed %",
    "tooltip": "",
    "group": "ui_group_controls",
    "order": 2,
    "width": 6,
    "height": 1,
    "passthru": true,
    "outs": "end",
    "topic": "fan_speed",
    "topicType": "str",
    "min": 0,
    "max": 100,
    "step": 10,
    "x": 150,
    "y": 540,
    "z": "dashboard_tab",
    "wires": [["fan_control"]]
  },
  {
    "id": "reservoir_button",
    "type": "ui_button",
    "name": "Force Reservoir Change",
    "group": "ui_group_controls",
    "order": 3,
    "width": 6,
    "height": 1,
    "label": "Force Reservoir Change",
    "tooltip": "Trigger immediate reservoir change",
    "color": "",
    "bgcolor": "#AD1625",
    "icon": "",
    "payload": "reservoir_change",
    "payloadType": "str",
    "topic": "manual_action",
    "topicType": "str",
    "x": 150,
    "y": 580,
    "z": "dashboard_tab",
    "wires": [["manual_action"]]
  },
  {
    "id": "led_control",
    "type": "http request",
    "name": "Control LED",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/control/led",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 350,
    "y": 500,
    "z": "dashboard_tab",
    "wires": [["control_response"]]
  },
  {
    "id": "fan_control",
    "type": "http request",
    "name": "Control Fan",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/control/fan",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 350,
    "y": 540,
    "z": "dashboard_tab",
    "wires": [["control_response"]]
  },
  {
    "id": "manual_action",
    "type": "http request",
    "name": "Manual Action",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/control/manual",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 350,
    "y": 580,
    "z": "dashboard_tab",
    "wires": [["control_response"]]
  },
  {
    "id": "control_response",
    "type": "ui_toast",
    "name": "Control Response",
    "position": "top right",
    "displayTime": "3",
    "highlight": "",
    "sendall": true,
    "outputs": 0,
    "x": 550,
    "y": 540,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "system_status_node",
    "type": "http request",
    "name": "Get System Status",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:8000/system/status",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 150,
    "y": 650,
    "z": "dashboard_tab",
    "wires": [["parse_system_status"]]
  },
  {
    "id": "parse_system_status",
    "type": "function",
    "name": "Parse System Status",
    "func": "// Parse system status information\nconst data = msg.payload;\n\nif (data.system) {\n    const system = data.system;\n    \n    // Last LLM Action\n    msg.llm_action = {\n        payload: system.last_llm_action || \"No recent LLM actions\",\n        timestamp: system.timestamp\n    };\n    \n    // Config Version\n    msg.config_version = {\n        payload: system.config_version || \"v1.0.0\",\n        timestamp: system.timestamp\n    };\n    \n    // System Uptime\n    msg.uptime = {\n        payload: system.uptime || \"Unknown\",\n        timestamp: system.timestamp\n    };\n    \n    // Error Count\n    msg.errors = {\n        payload: system.error_count || 0,\n        timestamp: system.timestamp\n    };\n}\n\nreturn [msg.llm_action, msg.config_version, msg.uptime, msg.errors];",
    "outputs": 4,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 650,
    "z": "dashboard_tab",
    "wires": [
      ["llm_action_text"],
      ["config_version_text"],
      ["uptime_text"],
      ["errors_text"]
    ]
  },
  {
    "id": "llm_action_text",
    "type": "ui_text",
    "name": "Last LLM Action",
    "group": "ui_group_system",
    "order": 1,
    "width": 6,
    "height": 1,
    "format": "Last LLM: {{msg.payload}}",
    "layout": "row-spread",
    "x": 550,
    "y": 620,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "config_version_text",
    "type": "ui_text",
    "name": "Config Version",
    "group": "ui_group_system",
    "order": 2,
    "width": 3,
    "height": 1,
    "format": "Config: {{msg.payload}}",
    "layout": "row-spread",
    "x": 550,
    "y": 660,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "uptime_text",
    "type": "ui_text",
    "name": "System Uptime",
    "group": "ui_group_system",
    "order": 3,
    "width": 3,
    "height": 1,
    "format": "Uptime: {{msg.payload}}",
    "layout": "row-spread",
    "x": 550,
    "y": 700,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "errors_text",
    "type": "ui_text",
    "name": "Error Count",
    "group": "ui_group_system",
    "order": 4,
    "width": 6,
    "height": 1,
    "format": "Errors (24h): {{msg.payload}}",
    "layout": "row-spread",
    "x": 550,
    "y": 740,
    "z": "dashboard_tab",
    "wires": []
  },
  {
    "id": "data_timer",
    "type": "inject",
    "name": "Data Timer",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "30",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "update",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 50,
    "z": "dashboard_tab",
    "wires": [
      ["sensor_data_node", "kpi_data_node", "system_status_node"]
    ]
  }
]