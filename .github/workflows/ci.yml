name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with ruff
      run: |
        ruff check app/ scripts/ tests/
    
    - name: Format check with black
      run: |
        black --check app/ scripts/ tests/
    
    - name: Type check with mypy (optional)
      run: |
        pip install mypy
        mypy app/ --ignore-missing-imports || true
    
    - name: Test with pytest
      env:
        MOCK_HARDWARE: true
        USE_LLM: false
        OPENAI_API_KEY: test-key
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  shadow-validation:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run shadow validation
      env:
        MOCK_HARDWARE: true
        USE_LLM: false
      run: |
        python scripts/shadow_validator.py --data tests/data/sensors_sample.csv
    
    - name: Upload shadow validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: shadow-validation-results
        path: shadow-validation-*.json

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: hydro-controller:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name hydro-test -p 8000:8000 \
          -e MOCK_HARDWARE=true \
          -e USE_LLM=false \
          hydro-controller:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Cleanup
        docker stop hydro-test

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r app/ scripts/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint-and-test, shadow-validation, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment commands here
        # e.g., deploy to staging server, update container, etc.
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-test, shadow-validation, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment commands here
        # e.g., deploy to production server, update container, etc.
    
    - name: Post-deployment validation
      run: |
        echo "Running post-deployment validation..."
        # Add validation commands here